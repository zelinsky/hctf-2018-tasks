n = 0x00b48c2940a26e2700839dee41f0782bb8ff55b34dbc79f4e5952b643e5164ab15095b78aa97e93722e42fbf198f976a0645e4d76e35ed98fd02823e23d47e2980821afdd88d7072c9da62f304b3b690fbc4b831a7b0476b3905928dcbe4600f108f3535da59b00298cb41acd5b1921e5b89f808915999fb760a069723c27b03e7055b8d92d56a624c161bb17068d14a3bd5724c107d2c3787d2b5940922e74a6f38fb2a67aca4a4332268317fc57065a414723c42d8a9078bc32ed965af9405d53c68a17b0f64500931f8e3f1de263327ac92491a254ed4401cbaa0938cd4437b8343b367d38174146a5ee23f9de559a6dcc82a580a8d559acd2531d92681f0fbb8224b8914b7a58a5e5fddc8228a6e2e6dd2b7990516b2847b59c08a6cd01e59470b2270802fddf2eaea05c17440af93c964f93b40923e575f21967e7d815a086b0bd4b4a23c56b65014c69955779772ffed58d7e1512a4acad4f7de858bf5efb3823e7a584c345c1bad89a5ec19f156cd60c47a9b7821632308b99f0127ab25fffad2c37e02e9002f9487e200b92fcd29921b2eaaf7c4bc4bcefdc99c5ff0b10d71fcc539752e7f2587d292e7ff808ae4164efe5eb8a9560f8264c997315cbd31969a7684c9720351bab9ca059f3471956bf8a3b9a8db7dc9e22b147d5c2994e70ba640b63b5887ae93076e9987d63a657d5590f19e0a4a806972715e45dddf
e = 3

with open('ciphertext', 'r') as f:
    c = int(f.read(), 16)

with open('plaintext', 'r') as f:
    m0 = int(f.read(), 16)

# m0 = int(m0.replace('X', '\x00').encode('hex'), 16)
# , 16)
# Max value since 15 bytes missing
kbits = 16 * 8

PR.<x> = PolynomialRing(Zmod(n))
f = (m0 + x)^e - c

set_verbose(2)
x0 = f.small_roots(X=2^kbits)[0]
plaintext = ('%x' % (m0 + x0))
print plaintext
